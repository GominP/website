{"version":3,"sources":["Component/Layout.js","App.js","serviceWorker.js","index.js","cssWeb/tee.jpg"],"names":["Header","Layout","Content","Footer","Sider","Layout1","react_default","a","createElement","className","style","marginLeft","fontSize","textAlign","src","tee","class","alt","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"sNAOQA,EAAmCC,IAAnCD,OAAuBE,GAAYD,IAA3BE,OAA2BF,IAAnBG,MAAmBH,IAAZC,SA+ChBG,mLA3CP,OACJC,EAAAC,EAAAC,cAAA,WACYF,EAAAC,EAAAC,cAACR,EAAD,KACQM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEC,WAAY,GAAIC,SAAU,GAAGC,UAAW,WAAtD,gBAKRP,EAAAC,EAAAC,cAACN,EAAD,CAASQ,MAAO,CAAEG,UAAW,WAC7BP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,iCAEJF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,OAAKM,IAAKC,IAAKC,MAAM,aAAaC,IAAI,aAC3CX,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,gBAAeV,EAAAC,EAAAC,cAAA,yBAC1BF,EAAAC,EAAAC,cAAA,MAAIQ,MAAM,qBACVV,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,qCACXV,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,QAAMQ,MAAM,aAAZ,WAAH,kBACfV,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,QAAMQ,MAAM,aAAZ,UAAH,MACAV,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,QAAMQ,MAAM,aAAZ,eAAH,oBACAV,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,QAAMQ,MAAM,aAAZ,gBAAH,wBACAV,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,QAAMQ,MAAM,aAAZ,YAAH,iBACAV,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,QAAMQ,MAAM,aAAZ,UAAH,gBAEDV,EAAAC,EAAAC,cAAA,MAAIQ,MAAM,qBACEV,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,gBAAeV,EAAAC,EAAAC,cAAA,qBAC1BF,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,yBACvBV,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,gBACTV,EAAAC,EAAAC,cAAA,MAAIQ,MAAM,iBAAV,gBAGFV,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,gBACTV,EAAAC,EAAAC,cAAA,MAAIQ,MAAM,iBAAV,uBAlCgBE,IAAMC,WCUbC,mLANP,OAAQd,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACP,EAAD,cAHEiB,IAAMC,WCCJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.ab859038.chunk.js","sourcesContent":["\r\nimport React,{ Component } from \"react\";\r\nimport 'antd/dist/antd.css';\r\nimport '../cssWeb/index.css';\r\nimport { Layout } from 'antd';\r\nimport tee from '../cssWeb/tee.jpg';\r\n\r\nconst { Header, Footer, Sider, Content } = Layout;\r\n\r\nclass Layout1 extends React.Component{\r\n    render(){\r\n        return(\r\n\t\t\t\t<div>\r\n          \t\t    <Header>\r\n                        <nav className=\"nav-bar\">\r\n                            <div style={{ marginLeft: 40, fontSize: 50,textAlign: 'center'  }}>\r\n                            My-Website\r\n                        </div>\r\n                        </nav>\r\n                    </Header>\r\n                    <Content style={{ textAlign: 'center'}}>\r\n                    <div >\r\n                        <h1>| Gomin Pawantao |</h1>\r\n                    </div>\r\n                    <div><img src={tee} class=\"picture-me\" alt=\"profile\"/></div>\r\n                    <div class=\"head-section\"><h1>Infomation</h1></div>\r\n                    <hr class=\"line-end-content\"></hr>\r\n                    <div class=\"div-font-contents content-aboutme\" >\r\n                    <p><span class=\"bold-text\">Name : </span>Gomin Pawantao</p>\r\n\t\t\t\t\t<p><span class=\"bold-text\">age : </span>19</p>\r\n\t\t\t\t\t<p><span class=\"bold-text\">Brithday : </span>22 December 1999</p>\r\n\t\t\t\t\t<p><span class=\"bold-text\">Education : </span>Kasetsart University</p>\r\n\t\t\t\t\t<p><span class=\"bold-text\">Email : </span>Gomin.p@ku.th</p>\r\n\t\t\t\t\t<p><span class=\"bold-text\">Tel : </span>095-8654531</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<hr class=\"line-end-content\"></hr>\r\n                <div class=\"head-section\"><h1>Skills</h1></div>\r\n                <div class=\"grid-container-skills\">\r\n\t\t\t\t<div class=\"grid-1-skill\">\r\n\t\t\t\t\t\t<h3 class=\"topic-content\">Programming</h3>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div class=\"grid-2-skill\">\r\n\t\t\t\t\t\t<h3 class=\"topic-content\">Language</h3>\r\n\t\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t    </div>\r\n                \r\n                    </Content>\r\n\t\t\t\t</div>\r\n\r\n        );\r\n    }\r\n}\r\nexport default Layout1;","import React,{ Component } from \"react\";\r\nimport Layout from './Component/Layout' ;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (<div>\r\n                <Layout/>\r\n                </div>);\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/tee.f3b344ae.jpg\";"],"sourceRoot":""}